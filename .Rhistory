path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path,colclasses='character')
outcome <-read.csv(C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv)
read.csv(outcome.csv)
setwd("~/GitHub/FirstRepo")
read outcome.csv
read.csv(outcome.csv)
data <-read.csv(path)
statedata <-subset(outcome,State=="SC")
statedata <- subset(outcome,State=="AL")
outcome<-data
statedata <-subset(outcome,State=="SC")
View(statedata)
outcomecall<-paste("pneumonia","+",sep="")
outcomeindex <- min(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answer <- outcome(outcomeindex)
answer <- outcome[outcomeindex]
answer
answer<-statedata(,outcomeindex)
statedata<-subset(outcome,State=="SC")
answer<-statedata[,outcomeindex]
answer
answerindex <- min(statedata[,outcomeindex])
?as.integer
View(statedata)
View(statedata)
?min
class(statedata[,outcomeindex])
answervector <- as.integer(min(statedata[,outcomeindex]))
answervector <- as.integer(statedata[,outcomeindex])
answervector
class(answervector)
min answervector
min(answervector)
answervector <- as.numeric(statedata[,outcomeindex])
answervector
View(statedata)
View(statedata)
statedata[,1]
statedata[,23]
statedata[,outcomeindex]
answervector<-as.numeric(statedata[,outcomeindex])
answervector
answervector
statedata[,outcomeindex]
as.numeric(statedata[outcomeindex])
as.numeric(statedata[,outcomeindex])
as.integer(statedata[,outcomeindex])
statedata[,outcomeindex]
min(statedtaa[,outcomeindex])
min(statedata[,outcomeindex])
family[, 1] <- as.numeric(as.character( family[, 1] ))
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex] ))
statedata[,outcomeindex]
min(statedata[,outcomeindex])
min(statedata[,outcomeindex],na.rm=False)
min(statedata[,outcomeindex],na.rm=FALSE)
answervector <- statedata[,outcomeindex]
min(answervector)
which.min(answervector)
answer <-statedata[which.min(answervector),outcomeindex]
answer
answer <-statedata[which.min(answervector),3]
answer
statedata(9,3)
statedata(9,3)
statedata
statedata[9,3]
statedata[9,2]
View(statedata)
statedata[9,]
View(outcome)
outcome[1,]
outcome[,1]
statedata[,1]
statedata[,2]
statedata[9,3]
statedata[[9,3]]
statedata[[9]][[3]]
statedata[[3]]
statedata[[2]]
statedata[[9]][[2]]
statedata[[c(9,2)]]
statedata[[c(2,9)]]
statedata[[c(1,1)]]
statedata[[c(2,1)]]
statedata
statedata[9,]
outcome[9,]
outcome[1,1]
statedata$outcomeindex
answerindex<-whichmin(answervector)
answerindex<-which.min(answervector)
statedata$answerindex
data[[1]][[1]]
dim(data)
data$hospitals
data$Hospital.Names
data$Hospital.Name
statedata$Hospital.Name
a<-statedata$Hospital.Name
dim(a)
length(a)
a<-as.numeric(a)
a
statedata[,outcomeindex]
class(statedata[,outcomeindex])
statedata[,1]
statedata[,2]
statedata[1,2]
statedata[,2]<-as.character(statedata[,2])
statedata[1,2]
which.min(statedata[,outcomeindex])
?match
whichmin(agrep("pneumonia"",colnames(outcome),ignore.case=TRUE))
whichmin(agrep("pneumonia"",colnames(outcome),ignore.case=TRUE))
b<-whichmin(agrep("pneumonia"",colnames(outcome),ignore.case=TRUE))
whichmin(agrep("pneumonia,colnames(outcome),ignore.case=TRUE))
whichmin(agrep("pneumonia,colnames(outcome),ignore.case=TRUE))
agrep("pneumonia,colnames(outcome),ignore.case=TRUE)
agrep("pneumonia+",colnames(outcome),ignore.case=TRUE)
agrep("pneumoniaz+",colnames(outcome),ignore.case=TRUE)
agrep("pneumoniazz+",colnames(outcome),ignore.case=TRUE)
agrep("heart failure+",colnames(outcome),ignore.case=TRUE)
agrep("heart attach+",colnames(outcome),ignore.case=TRUE)
agrep("heart attack+",colnames(outcome),ignore.case=TRUE)
best <- function (statecall,outcomecall) {
##read outcome data
path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path)
outcomeindex <-vector(mode="numeric")
## check that state and outcome are valid
If is.na (match(statecall,outcome$State)) {
stop("invalid state")
}H
##how do you do this for outcome
outcomecall <- paste(outcomecall,"+",sep="")
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
If outcomeindex==0 {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
## First it sorts it by state
statedata <- subset(outcome,State==statecall)
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answerindex <- whichmin(statedata[,outcomeindex])
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex]))
}
best <- function (statecall,outcomecall) {
##read outcome data
path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path)
outcomeindex <-vector(mode="numeric")
## check that state and outcome are valid
If is.na (match(statecall,outcome$State)) {
stop("invalid state")
}
##how do you do this for outcome
outcomecall <- paste(outcomecall,"+",sep="")
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
If outcomeindex==0 {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
## First it sorts it by state
statedata <- subset(outcome,State==statecall)
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answerindex <- whichmin(statedata[,outcomeindex])
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex]))
}
best <- function (statecall,outcomecall) {
##read outcome data
path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path)
outcomeindex <-vector(mode="numeric")
## check that state and outcome are valid
If is.na (match(statecall,outcome$State)) {
stop("invalid state")
}
##how do you do this for outcome
outcomecall <- paste(outcomecall,"+",sep="")
outcomeindex <- which.min(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
If outcomeindex==0 {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
## First it sorts it by state
statedata <- subset(outcome,State==statecall)
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answerindex <- whichmin(statedata[,outcomeindex])
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex]))
}
best <- function (statecall,outcomecall) {
##read outcome data
path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path)
outcomeindex <-vector(mode="numeric")
If is.na (match(statecall,outcome$State)) {
stop("invalid state")
}
##how do you do this for outcome
outcomecall <- paste(outcomecall,"+",sep="")
outcomeindex <- which.min(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
If outcomeindex==0 {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
## First it sorts it by state
statedata <- subset(outcome,State==statecall)
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answerindex <- whichmin(statedata[,outcomeindex])
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex]))
}
best <- function (statecall,outcomecall) {
##read outcome data
path <- "C:\\Users\\Rich\\Documents\\Github\\FirstRepo\\outcome-of-care-measures.csv"
outcome <- read.csv(path)
If is.na (match(statecall,outcome$State)) {
stop("invalid state")
}
##how do you do this for outcome
outcomecall <- paste(outcomecall,"+",sep="")
outcomeindex <- which.min(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
If outcomeindex==0 {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
## First it sorts it by state
statedata <- subset(outcome,State==statecall)
outcomeindex <- whichmin(agrep(outcomecall,colnames(outcome),ignore.case=TRUE))
answerindex <- whichmin(statedata[,outcomeindex])
statedata[,outcomeindex] <- as.numeric(as.character(statedata[,outcomeindex]))
}
?stop
